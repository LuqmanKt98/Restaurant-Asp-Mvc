@model WebRestoran.Models.Ingredient

@{
    ViewData["Title"] = "Edit Ingredient";
}

<!-- Page Header -->
<div class="container-fluid">
    <div class="hero-section bg-gradient-warning">
        <div class="hero-content">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="hero-title"><i class="bi bi-pencil-square me-2"></i>Edit Ingredient</h1>
                    <p class="hero-subtitle">Update ingredient information</p>
                </div>
                <div class="d-flex gap-2">
                    <a asp-action="Details" asp-route-id="@Model.IngredientId" class="btn-modern btn-light">
                        <i class="bi bi-eye me-2"></i>View Details
                    </a>
                    <a asp-action="Index" class="btn-modern btn-light">
                        <i class="bi bi-arrow-left me-2"></i>Back to List
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8">
            <!-- Current Info Card -->
            <div class="card-modern mb-4 bg-light">
                <div class="card-body p-3">
                    <h6 class="card-title text-muted mb-2">
                        <i class="bi bi-info-circle me-2"></i>Current Information
                    </h6>
                    <div class="d-flex align-items-center">
                        <div class="bg-white rounded-circle p-2 me-3">
                            <i class="bi bi-tag text-warning"></i>
                        </div>
                        <div>
                            <strong class="text-dark">@Model.IngredientName</strong>
                            <small class="text-muted d-block">ID: @Model.IngredientId</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Edit Form Card -->
            <div class="card-modern">
                <div class="card-header bg-white border-bottom-0 py-3">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-pencil text-warning me-2"></i>
                        Update Ingredient Information
                    </h5>
                </div>
                <div class="card-body p-4">
                    <form asp-action="Edit" id="editIngredientForm">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger d-none" role="alert">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            Please correct the errors below.
                        </div>

                        <input type="hidden" asp-for="IngredientId" />

                        <div class="mb-4">
                            <label asp-for="IngredientName" class="form-label fw-semibold">
                                <i class="bi bi-tag me-2 text-warning"></i>Ingredient Name
                            </label>
                            <div class="input-group">
                                <span class="input-group-text bg-light border-end-0">
                                    <i class="bi bi-pencil text-muted"></i>
                                </span>
                                <input asp-for="IngredientName" 
                                       class="form-control border-start-0 ps-0" 
                                       placeholder="Enter ingredient name"
                                       autocomplete="off" />
                            </div>
                            <span asp-validation-for="IngredientName" class="text-danger small mt-1 d-block"></span>
                            <div class="form-text">
                                <i class="bi bi-lightbulb me-1"></i>
                                Choose a clear, descriptive name for easy identification
                            </div>
                        </div>

                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <a asp-action="Index" class="btn-modern btn-outline me-md-2">
                                <i class="bi bi-x-circle me-2"></i>Cancel
                            </a>
                            <a asp-action="Details" asp-route-id="@Model.IngredientId" class="btn-modern btn-outline me-md-2">
                                <i class="bi bi-eye me-2"></i>View Details
                            </a>
                            <button type="submit" class="btn-modern btn-warning" id="submitBtn">
                                <span class="btn-text">
                                    <i class="bi bi-check-circle me-2"></i>Save Changes
                                </span>
                                <span class="btn-loading d-none">
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    Saving...
                                </span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Help Card -->
            <div class="card-modern mt-4 bg-light">
                <div class="card-body p-3">
                    <h6 class="card-title text-muted mb-2">
                        <i class="bi bi-question-circle me-2"></i>Editing Guidelines
                    </h6>
                    <ul class="list-unstyled mb-0 small text-muted">
                        <li class="mb-1"><i class="bi bi-check2 text-success me-2"></i>Make sure the new name is unique and descriptive</li>
                        <li class="mb-1"><i class="bi bi-check2 text-success me-2"></i>Consider how this change might affect existing food items</li>
                        <li class="mb-0"><i class="bi bi-check2 text-success me-2"></i>Use proper capitalization for consistency</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('editIngredientForm');
            const submitBtn = document.getElementById('submitBtn');
            const ingredientNameInput = document.querySelector('input[name="IngredientName"]');
            const btnText = submitBtn.querySelector('.btn-text');
            const btnLoading = submitBtn.querySelector('.btn-loading');
            const originalName = ingredientNameInput.value;
            
            // Form validation and submission
            form.addEventListener('submit', function(e) {
                // Show loading state
                submitBtn.disabled = true;
                btnText.classList.add('d-none');
                btnLoading.classList.remove('d-none');
                
                // Basic client-side validation
                const ingredientName = ingredientNameInput.value.trim();
                if (!ingredientName) {
                    e.preventDefault();
                    showValidationError('Ingredient name is required.');
                    resetSubmitButton();
                    return;
                }
                
                if (ingredientName.length < 2) {
                    e.preventDefault();
                    showValidationError('Ingredient name must be at least 2 characters long.');
                    resetSubmitButton();
                    return;
                }
                
                if (ingredientName.length > 50) {
                    e.preventDefault();
                    showValidationError('Ingredient name cannot exceed 50 characters.');
                    resetSubmitButton();
                    return;
                }
                
                // Check for special characters
                const validNamePattern = /^[a-zA-Z0-9\s\-']+$/;
                if (!validNamePattern.test(ingredientName)) {
                    e.preventDefault();
                    showValidationError('Ingredient name contains invalid characters.');
                    resetSubmitButton();
                    return;
                }
            });
            
            // Real-time input validation
            ingredientNameInput.addEventListener('input', function() {
                const value = this.value.trim();
                const validationSpan = document.querySelector('span[data-valmsg-for="IngredientName"]');
                
                // Clear previous validation messages
                validationSpan.textContent = '';
                this.classList.remove('is-invalid', 'is-valid');
                
                // Check if value has changed from original
                const hasChanged = value !== originalName;
                submitBtn.disabled = !hasChanged || value.length === 0;
                
                if (value.length > 0) {
                    if (value.length >= 2 && value.length <= 50) {
                        const validNamePattern = /^[a-zA-Z0-9\s\-']+$/;
                        if (validNamePattern.test(value)) {
                            this.classList.add('is-valid');
                        } else {
                            this.classList.add('is-invalid');
                            validationSpan.textContent = 'Invalid characters detected.';
                        }
                    } else {
                        this.classList.add('is-invalid');
                        if (value.length < 2) {
                            validationSpan.textContent = 'Name too short (minimum 2 characters).';
                        } else {
                            validationSpan.textContent = 'Name too long (maximum 50 characters).';
                        }
                    }
                }
            });
            
            // Auto-capitalize first letter
            ingredientNameInput.addEventListener('blur', function() {
                const value = this.value.trim();
                if (value) {
                    const capitalizedValue = value.replace(/\b\w/g, l => l.toUpperCase());
                    this.value = capitalizedValue;
                }
            });
            
            // Helper functions
            function showValidationError(message) {
                const validationSummary = document.querySelector('[asp-validation-summary]');
                validationSummary.classList.remove('d-none');
                validationSummary.innerHTML = `
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    ${message}
                `;
                validationSummary.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
            
            function resetSubmitButton() {
                submitBtn.disabled = false;
                btnText.classList.remove('d-none');
                btnLoading.classList.add('d-none');
            }
            
            // Add animation effects
            const cards = document.querySelectorAll('.card');
            cards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                
                setTimeout(() => {
                    card.style.transition = 'all 0.4s ease';
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, index * 100);
            });
            
            // Focus on ingredient name input
            setTimeout(() => {
                ingredientNameInput.focus();
                ingredientNameInput.select();
            }, 500);
            
            // Add hover effects
            const buttons = document.querySelectorAll('.btn');
            buttons.forEach(button => {
                button.addEventListener('mouseenter', function() {
                    if (!this.disabled) {
                        this.style.transform = 'translateY(-1px)';
                        this.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
                    }
                });
                
                button.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                    this.style.boxShadow = '';
                });
            });
        });
    </script>
}