@model IEnumerable<WebRestoran.Models.Ingredient>
@{
    ViewData["Title"] = "Low Stock Alerts";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="text-warning fw-bold">
                    <i class="fas fa-exclamation-triangle me-2"></i>Low Stock Alerts
                </h2>
                <div class="d-flex gap-2">
                    <a href="@Url.Action("Inventory")" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left me-1"></i>Back to Inventory
                    </a>
                    <button type="button" class="btn btn-warning" onclick="window.print()">
                        <i class="fas fa-print me-1"></i>Print Report
                    </button>
                </div>
            </div>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            @if (Model.Any())
            {
                <!-- Summary Cards -->
                <div class="row mb-4">
                    <div class="col-md-4">
                        <div class="card border-warning">
                            <div class="card-body text-center">
                                <h3 class="text-warning mb-2">@Model.Count()</h3>
                                <p class="text-muted mb-0">Ingredients Need Restocking</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card border-danger">
                            <div class="card-body text-center">
                                <h3 class="text-danger mb-2">@Model.Count(i => i.CurrentStock <= i.MinimumStock * 0.5m)</h3>
                                <p class="text-muted mb-0">Critical Stock Levels</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card border-info">
                            <div class="card-body text-center">
                                <h3 class="text-info mb-2">@Model.Sum(i => i.CurrentStock * i.CostPerUnit).ToString("C")</h3>
                                <p class="text-muted mb-0">Total Value at Risk</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Low Stock Alerts Table -->
                <div class="card">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="mb-0">
                            <i class="fas fa-exclamation-triangle me-2"></i>Ingredients Requiring Immediate Attention
                        </h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Ingredient</th>
                                        <th>Current Stock</th>
                                        <th>Minimum Required</th>
                                        <th>Shortage</th>
                                        <th>Priority</th>
                                        <th>Supplier</th>
                                        <th>Last Restocked</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var ingredient in Model.OrderBy(i => i.CurrentStock / i.MinimumStock))
                                    {
                                        var shortagePercentage = (ingredient.MinimumStock - ingredient.CurrentStock) / ingredient.MinimumStock * 100;
                                        var priorityClass = ingredient.CurrentStock <= ingredient.MinimumStock * 0.5m ? "danger" : "warning";
                                        var priorityText = ingredient.CurrentStock <= ingredient.MinimumStock * 0.5m ? "Critical" : "Low";
                                        
                                        <tr class="@(priorityClass == "danger" ? "table-danger" : "table-warning")">
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-box text-muted me-2"></i>
                                                    <div>
                                                        <strong>@ingredient.IngredientName</strong>
                                                        <br>
                                                        <small class="text-muted">ID: @ingredient.IngredientId</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge bg-@priorityClass fs-6">
                                                    @ingredient.CurrentStock @ingredient.Unit
                                                </span>
                                            </td>
                                            <td>
                                                <span class="text-success fw-semibold">
                                                    @ingredient.MinimumStock @ingredient.Unit
                                                </span>
                                            </td>
                                            <td>
                                                <span class="text-@priorityClass fw-bold">
                                                    @(ingredient.MinimumStock - ingredient.CurrentStock) @ingredient.Unit
                                                    <br>
                                                    <small>(@shortagePercentage.ToString("F1")% below min)</small>
                                                </span>
                                            </td>
                                            <td>
                                                <span class="badge bg-@priorityClass">
                                                    <i class="fas @(priorityClass == "danger" ? "fa-exclamation-circle" : "fa-exclamation-triangle") me-1"></i>
                                                    @priorityText
                                                </span>
                                            </td>
                                            <td>
                                                <div>
                                                    <strong>@ingredient.Supplier</strong>
                                                    <br>
                                                    <small class="text-muted">Cost: @ingredient.CostPerUnit.ToString("C")/@ingredient.Unit</small>
                                                </div>
                                            </td>
                                            <td>
                                                @if (ingredient.LastRestocked.HasValue)
                                                {
                                                    var daysSinceRestock = (DateTime.Now - ingredient.LastRestocked.Value).Days;
                                                    <span class="@(daysSinceRestock > 30 ? "text-danger" : "text-muted")">
                                                        @ingredient.LastRestocked.Value.ToString("MMM dd, yyyy")
                                                        <br>
                                                        <small>(@daysSinceRestock days ago)</small>
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-danger">
                                                        Never
                                                        <br>
                                                        <small><i class="fas fa-exclamation-triangle"></i> No restock history</small>
                                                    </span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group-vertical btn-group-sm" role="group">
                                                    <button type="button" class="btn btn-success btn-sm" 
                                                            data-bs-toggle="modal" data-bs-target="#restockModal"
                                                            data-ingredient-id="@ingredient.IngredientId"
                                                            data-ingredient-name="@ingredient.IngredientName"
                                                            data-current-stock="@ingredient.CurrentStock"
                                                            data-minimum-stock="@ingredient.MinimumStock"
                                                            data-unit="@ingredient.Unit"
                                                            data-supplier="@ingredient.Supplier">
                                                        <i class="fas fa-plus me-1"></i>Restock
                                                    </button>
                                                    <a href="@Url.Action("InventoryDetails", new { id = ingredient.IngredientId })" 
                                                       class="btn btn-outline-primary btn-sm">
                                                        <i class="fas fa-info-circle me-1"></i>Details
                                                    </a>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Bulk Actions -->
                <div class="card mt-4">
                    <div class="card-header bg-light">
                        <h6 class="mb-0"><i class="fas fa-tools me-2"></i>Bulk Actions</h6>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6 class="text-primary">Quick Restock Options</h6>
                                <div class="d-flex gap-2 flex-wrap">
                                    <button type="button" class="btn btn-warning" onclick="restockAllCritical()">
                                        <i class="fas fa-exclamation-circle me-1"></i>Restock All Critical
                                    </button>
                                    <button type="button" class="btn btn-outline-warning" onclick="generateRestockReport()">
                                        <i class="fas fa-file-alt me-1"></i>Generate Restock Report
                                    </button>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h6 class="text-primary">Export Options</h6>
                                <div class="d-flex gap-2 flex-wrap">
                                    <button type="button" class="btn btn-outline-secondary" onclick="exportToCSV()">
                                        <i class="fas fa-file-csv me-1"></i>Export CSV
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary" onclick="emailReport()">
                                        <i class="fas fa-envelope me-1"></i>Email Report
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- No Low Stock Items -->
                <div class="card border-success">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-check-circle text-success" style="font-size: 4rem;"></i>
                        <h3 class="text-success mt-3 mb-2">All Stock Levels Good!</h3>
                        <p class="text-muted mb-4">No ingredients are currently below their minimum stock levels.</p>
                        <a href="@Url.Action("Inventory")" class="btn btn-success">
                            <i class="fas fa-box me-1"></i>View Full Inventory
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Restock Modal -->
<div class="modal fade" id="restockModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">
                    <i class="fas fa-plus me-2"></i>Restock Ingredient
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form method="post" action="@Url.Action("UpdateStock")">
                <div class="modal-body">
                    <input type="hidden" id="modalIngredientId" name="id" />
                    <div class="alert alert-warning">
                        <strong>Low Stock Alert!</strong> This ingredient needs immediate restocking.
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Ingredient:</label>
                        <p id="modalIngredientName" class="text-primary fw-bold"></p>
                    </div>
                    <div class="row mb-3">
                        <div class="col-6">
                            <label class="form-label fw-semibold">Current Stock:</label>
                            <p id="modalCurrentStock" class="text-danger"></p>
                        </div>
                        <div class="col-6">
                            <label class="form-label fw-semibold">Minimum Required:</label>
                            <p id="modalMinimumStock" class="text-success"></p>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Supplier:</label>
                        <p id="modalSupplier" class="text-muted"></p>
                    </div>
                    <div class="mb-3">
                        <label for="modalNewStock" class="form-label fw-semibold">New Stock Amount:</label>
                        <div class="input-group">
                            <input type="number" class="form-control" id="modalNewStock" name="newStock" 
                                   step="0.01" min="0" required>
                            <span class="input-group-text" id="modalUnit"></span>
                        </div>
                        <div class="form-text">Recommended: <span id="recommendedAmount"></span></div>
                    </div>
                    <div class="mb-3">
                        <label for="modalNotes" class="form-label fw-semibold">Restock Notes:</label>
                        <textarea class="form-control" id="modalNotes" name="notes" rows="3" 
                                  placeholder="Add notes about this restock..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-warning">Restock Now</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Handle restock modal data
    document.addEventListener('DOMContentLoaded', function() {
        const restockModal = document.getElementById('restockModal');
        restockModal.addEventListener('show.bs.modal', function(event) {
            const button = event.relatedTarget;
            const ingredientId = button.getAttribute('data-ingredient-id');
            const ingredientName = button.getAttribute('data-ingredient-name');
            const currentStock = parseFloat(button.getAttribute('data-current-stock'));
            const minimumStock = parseFloat(button.getAttribute('data-minimum-stock'));
            const unit = button.getAttribute('data-unit');
            const supplier = button.getAttribute('data-supplier');
            
            const recommendedAmount = minimumStock + 50; // Add buffer
            
            document.getElementById('modalIngredientId').value = ingredientId;
            document.getElementById('modalIngredientName').textContent = ingredientName;
            document.getElementById('modalCurrentStock').textContent = currentStock + ' ' + unit;
            document.getElementById('modalMinimumStock').textContent = minimumStock + ' ' + unit;
            document.getElementById('modalSupplier').textContent = supplier;
            document.getElementById('modalUnit').textContent = unit;
            document.getElementById('modalNewStock').value = recommendedAmount;
            document.getElementById('recommendedAmount').textContent = recommendedAmount + ' ' + unit + ' (minimum + buffer)';
            document.getElementById('modalNotes').value = 'Low stock alert restock - Contact ' + supplier;
        });
    });
    
    // Bulk actions
    function restockAllCritical() {
        if (confirm('This will mark all critical items for restocking. Continue?')) {
            // Implementation would go here
            alert('Feature coming soon: Bulk restock for critical items');
        }
    }
    
    function generateRestockReport() {
        window.open('@Url.Action("LowStockAlerts")?format=pdf', '_blank');
    }
    
    function exportToCSV() {
        window.location.href = '@Url.Action("LowStockAlerts")?format=csv';
    }
    
    function emailReport() {
        alert('Feature coming soon: Email low stock report to management');
    }
</script>

<style>
    @@media print {
        .btn, .modal, .card-header .btn {
            display: none !important;
        }
        .card {
            border: 1px solid #000 !important;
        }
    }
    
    .table-warning {
        --bs-table-bg: #fff3cd;
    }
    
    .table-danger {
        --bs-table-bg: #f8d7da;
    }
</style>