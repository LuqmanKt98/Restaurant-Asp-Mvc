// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebRestoran.Data;

#nullable disable

namespace WebRestoran.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250918040720_FixIngredientSeedData")]
    partial class FixIngredientSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebRestoran.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebRestoran.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Predjelo"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Glavno jelo"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Juha"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Salata"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Desert"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Piće"
                        });
                });

            modelBuilder.Entity("WebRestoran.Models.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("FoodId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Food");

                    b.HasData(
                        new
                        {
                            FoodId = 1,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Piletinom i Rižom",
                            FoodName = "Wok Piletina Riža",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 10.3m,
                            Stock = 37
                        },
                        new
                        {
                            FoodId = 2,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Piletinom i Tjesteninom",
                            FoodName = "Wok Piletina Tjestenina",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 10.6m,
                            Stock = 43
                        },
                        new
                        {
                            FoodId = 3,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Piletinom i Staklenim rezancima",
                            FoodName = "Wok Piletina Stakleni rezanci",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 10.9m,
                            Stock = 53
                        },
                        new
                        {
                            FoodId = 4,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Junetinom i Rižom",
                            FoodName = "Wok Junetina Riža",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 12.5m,
                            Stock = 25
                        },
                        new
                        {
                            FoodId = 5,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Junetinom i Tjesteninom",
                            FoodName = "Wok Junetina Tjestenina",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 12.9m,
                            Stock = 38
                        },
                        new
                        {
                            FoodId = 6,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Junetinom i Staklenim rezancima",
                            FoodName = "Wok Junetina Stakleni rezanci",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 13.1m,
                            Stock = 55
                        },
                        new
                        {
                            FoodId = 7,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Svinjetinom i Rižom",
                            FoodName = "Wok Svinjetina Riža",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 10.5m,
                            Stock = 37
                        },
                        new
                        {
                            FoodId = 8,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Svinjetinom i Tjesteninom",
                            FoodName = "Wok Svinjetina Tjestenina",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 10.7m,
                            Stock = 45
                        },
                        new
                        {
                            FoodId = 9,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Svinjetinom i Staklenim rezancima",
                            FoodName = "Wok Svinjetina Stakleni rezanci",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 11.5m,
                            Stock = 28
                        },
                        new
                        {
                            FoodId = 10,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Morskim plodovima i Rižom",
                            FoodName = "Wok Morski plodovi Riža",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 13.5m,
                            Stock = 42
                        },
                        new
                        {
                            FoodId = 11,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Morskim plodovima i Tjesteninom",
                            FoodName = "Wok Morski plodovi Tjestenina",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 13.7m,
                            Stock = 37
                        },
                        new
                        {
                            FoodId = 12,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Morskim plodovima i Staklenim rezancima",
                            FoodName = "Wok Morski plodovi Stakleni rezanci",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 13.9m,
                            Stock = 34
                        },
                        new
                        {
                            FoodId = 13,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Tofu i Rižom",
                            FoodName = "Wok Tofu Riža",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 10.5m,
                            Stock = 28
                        },
                        new
                        {
                            FoodId = 14,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Tofu i Tjesteninom",
                            FoodName = "Wok Tofu Tjestenina",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 10.3m,
                            Stock = 23
                        },
                        new
                        {
                            FoodId = 15,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Tofu i Staklenim rezancima",
                            FoodName = "Wok Tofu Stakleni rezanci",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 10.8m,
                            Stock = 36
                        },
                        new
                        {
                            FoodId = 16,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Povrćem i Rižom",
                            FoodName = "Wok Povrće Riža",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 8.5m,
                            Stock = 17
                        },
                        new
                        {
                            FoodId = 17,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Povrćem i Tjesteninom",
                            FoodName = "Wok Povrće Tjestenina",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 8.5m,
                            Stock = 43
                        },
                        new
                        {
                            FoodId = 18,
                            CategoryId = 1,
                            Description = "Ukusni wok sa Povrćem i Staklenim rezancima",
                            FoodName = "Wok Povrće Stakleni rezanci",
                            ImageUrl = "https://www.placeholder.com/333",
                            Price = 8.5m,
                            Stock = 36
                        });
                });

            modelBuilder.Entity("WebRestoran.Models.FoodIngredient", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IngredientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FoodId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("FoodIngredients");

                    b.HasData(
                        new
                        {
                            FoodId = 1,
                            IngredientId = 1
                        },
                        new
                        {
                            FoodId = 1,
                            IngredientId = 7
                        },
                        new
                        {
                            FoodId = 2,
                            IngredientId = 1
                        },
                        new
                        {
                            FoodId = 2,
                            IngredientId = 8
                        },
                        new
                        {
                            FoodId = 3,
                            IngredientId = 1
                        },
                        new
                        {
                            FoodId = 3,
                            IngredientId = 9
                        },
                        new
                        {
                            FoodId = 4,
                            IngredientId = 2
                        },
                        new
                        {
                            FoodId = 4,
                            IngredientId = 7
                        },
                        new
                        {
                            FoodId = 5,
                            IngredientId = 2
                        },
                        new
                        {
                            FoodId = 5,
                            IngredientId = 8
                        },
                        new
                        {
                            FoodId = 6,
                            IngredientId = 2
                        },
                        new
                        {
                            FoodId = 6,
                            IngredientId = 9
                        },
                        new
                        {
                            FoodId = 7,
                            IngredientId = 3
                        },
                        new
                        {
                            FoodId = 7,
                            IngredientId = 7
                        },
                        new
                        {
                            FoodId = 8,
                            IngredientId = 3
                        },
                        new
                        {
                            FoodId = 8,
                            IngredientId = 8
                        },
                        new
                        {
                            FoodId = 9,
                            IngredientId = 3
                        },
                        new
                        {
                            FoodId = 9,
                            IngredientId = 9
                        },
                        new
                        {
                            FoodId = 10,
                            IngredientId = 4
                        },
                        new
                        {
                            FoodId = 10,
                            IngredientId = 7
                        },
                        new
                        {
                            FoodId = 11,
                            IngredientId = 4
                        },
                        new
                        {
                            FoodId = 11,
                            IngredientId = 8
                        },
                        new
                        {
                            FoodId = 12,
                            IngredientId = 4
                        },
                        new
                        {
                            FoodId = 12,
                            IngredientId = 9
                        },
                        new
                        {
                            FoodId = 13,
                            IngredientId = 5
                        },
                        new
                        {
                            FoodId = 13,
                            IngredientId = 7
                        },
                        new
                        {
                            FoodId = 14,
                            IngredientId = 5
                        },
                        new
                        {
                            FoodId = 14,
                            IngredientId = 8
                        },
                        new
                        {
                            FoodId = 15,
                            IngredientId = 5
                        },
                        new
                        {
                            FoodId = 15,
                            IngredientId = 9
                        },
                        new
                        {
                            FoodId = 16,
                            IngredientId = 6
                        },
                        new
                        {
                            FoodId = 16,
                            IngredientId = 7
                        },
                        new
                        {
                            FoodId = 17,
                            IngredientId = 6
                        },
                        new
                        {
                            FoodId = 17,
                            IngredientId = 8
                        },
                        new
                        {
                            FoodId = 18,
                            IngredientId = 6
                        },
                        new
                        {
                            FoodId = 18,
                            IngredientId = 9
                        });
                });

            modelBuilder.Entity("WebRestoran.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CostPerUnit")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentStock")
                        .HasColumnType("TEXT");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastRestocked")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinimumStock")
                        .HasColumnType("TEXT");

                    b.Property<string>("Supplier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            CostPerUnit = 15.50m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentStock = 100m,
                            IngredientName = "Piletina",
                            LastRestocked = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStock = 20m,
                            Supplier = "Local Farm",
                            Unit = "kg",
                            UpdatedDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IngredientId = 2,
                            CostPerUnit = 25.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentStock = 80m,
                            IngredientName = "Junetina",
                            LastRestocked = new DateTime(2024, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStock = 15m,
                            Supplier = "Meat Supplier Co",
                            Unit = "kg",
                            UpdatedDate = new DateTime(2024, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IngredientId = 3,
                            CostPerUnit = 18.75m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentStock = 60m,
                            IngredientName = "Svinjetina",
                            LastRestocked = new DateTime(2024, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStock = 10m,
                            Supplier = "Meat Supplier Co",
                            Unit = "kg",
                            UpdatedDate = new DateTime(2024, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IngredientId = 4,
                            CostPerUnit = 35.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentStock = 30m,
                            IngredientName = "Morski plodovi",
                            LastRestocked = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStock = 8m,
                            Supplier = "Ocean Fresh",
                            Unit = "kg",
                            UpdatedDate = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IngredientId = 5,
                            CostPerUnit = 8.50m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentStock = 50m,
                            IngredientName = "Tofu",
                            LastRestocked = new DateTime(2024, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStock = 12m,
                            Supplier = "Vegan Foods Ltd",
                            Unit = "kg",
                            UpdatedDate = new DateTime(2024, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IngredientId = 6,
                            CostPerUnit = 3.25m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentStock = 200m,
                            IngredientName = "Povrće",
                            LastRestocked = new DateTime(2024, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStock = 50m,
                            Supplier = "Garden Fresh",
                            Unit = "kg",
                            UpdatedDate = new DateTime(2024, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IngredientId = 7,
                            CostPerUnit = 2.80m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentStock = 150m,
                            IngredientName = "Riža",
                            LastRestocked = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStock = 30m,
                            Supplier = "Rice Imports",
                            Unit = "kg",
                            UpdatedDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IngredientId = 8,
                            CostPerUnit = 4.20m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentStock = 120m,
                            IngredientName = "Tjestenina",
                            LastRestocked = new DateTime(2024, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStock = 25m,
                            Supplier = "Pasta Co",
                            Unit = "kg",
                            UpdatedDate = new DateTime(2024, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IngredientId = 9,
                            CostPerUnit = 6.75m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentStock = 90m,
                            IngredientName = "Stakleni rezanci",
                            LastRestocked = new DateTime(2024, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStock = 18m,
                            Supplier = "Asian Foods",
                            Unit = "kg",
                            UpdatedDate = new DateTime(2024, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("WebRestoran.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebRestoran.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderItemId");

                    b.HasIndex("FoodId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebRestoran.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebRestoran.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebRestoran.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebRestoran.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRestoran.Models.Food", b =>
                {
                    b.HasOne("WebRestoran.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebRestoran.Models.FoodIngredient", b =>
                {
                    b.HasOne("WebRestoran.Models.Food", "Food")
                        .WithMany("FoodIngredients")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebRestoran.Models.Ingredient", "Ingredient")
                        .WithMany("FoodIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("WebRestoran.Models.Order", b =>
                {
                    b.HasOne("WebRestoran.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebRestoran.Models.OrderItem", b =>
                {
                    b.HasOne("WebRestoran.Models.Food", "Food")
                        .WithMany("OrderItems")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebRestoran.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("WebRestoran.Models.ApplicationUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebRestoran.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebRestoran.Models.Food", b =>
                {
                    b.Navigation("FoodIngredients");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("WebRestoran.Models.Ingredient", b =>
                {
                    b.Navigation("FoodIngredients");
                });

            modelBuilder.Entity("WebRestoran.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
